/* $Id: cpp_func.txt 134 2011-12-21 18:41:27Z Albert $ */
  13: [00010010] void .fn_init()
  14: [00010040] void ClockStrobe()
  15: [00010050] void UnlockClockStrobe()
  16: [00010050] void LockClockStrobe()
  17: [00010050] void CLOCK_STROBE_END()
  27: [00011AE0] void CCDAudio::CCDAudio()
  28: [00011AD0] void CCDAudio::~CCDAudio()
  44: [00010060] void .fn_init()
  45: [000100D0] void PreloadCache()
  46: [000101B0] void StartLevel(GAMEOPTIONS *)
  47: [00010630] void StartNetworkLevel()
  48: [000106D0] void LocalKeys()
  49: [00010CB0] void ProcessFrame()
  50: [00010FE0] void GameErrorHandler(const Error &)
  51: [00011070] void ParseOptions()
  53: [00011AC0] void BloodLoadSave::Save()
  54: [00011AC0] void BloodLoadSave::Load()
  69: [00011B00] void scrFindClosestColor(int, int, int)
  70: [00011B90] void scrCreateStdColors()
  71: [00011BE0] void scrLoadPLUs()
  72: [00011D10] void scrLoadPalette()
  73: [00011E30] void scrSetMessage(char *)
  74: [00011E70] void scrDisplayMessage(int)
  75: [00011EB0] void scrSetPalette(int)
  76: [00011EC0] void scrSetGamma(int)
  77: [00011F60] void scrSetupFade(unsigned char, unsigned char, unsigned char)
  78: [00011FB0] void scrSetupUnfade()
  79: [00011FE0] void scrFadeAmount(int)
  80: [000120A0] void scrSetDac()
  81: [000120E0] void scrInit()
  82: [00012190] void scrSetGameMode(int, int, int)
  83: [00012310] void scrNextPage()
  91: [0001B850] void IncBy(int, int)
  92: [0001B840] void ClipLow(int, int)
  93: [0001B830] void ClipHigh(int, int)
  94: [0001B820] void ClipRange(int, int, int)
  95: [0001B790] void GetSpriteExtents(SPRITE *, int *, int *)
  96: [0001B770] void Sin(int)
  97: [0001B760] void Cos(int)
  98: [0001B740] void Rect::Rect(int, int, int, int)
  99: [0001B720] void Rect::isValid()
 100: [0001B700] void Rect::isEmpty()
 101: [0001B6E0] void ()
 102: [0001B6A0] void ()
 103: [0001B680] void IsPlayerSprite(SPRITE *)
 104: [00012330] void .fn_init()
 105: [00012380] void IsUnderwaterSector(int)
 106: [000123C0] void viewToggle(int)
 107: [00012400] void viewInitializePrediction()
 108: [000125B0] void viewUpdatePrediction(INPUT *)
 109: [000138C0] void fakeProcessInput(PLAYER *, INPUT *)
 110: [00013DC0] void fakePlayerProcess(PLAYER *, INPUT *)
 111: [000147B0] void fakeMoveDude(SPRITE *)
 112: [00014F40] void fakeActProcessSprites()
 113: [000157B0] void viewCorrectPrediction()
 114: [000158C0] void viewBackupView(int)
 115: [00015940] void viewClearInterpolations()
 116: [00015980] void viewAddInterpolation(void *, INTERPOLATE_TYPE)
 117: [000159F0] void CalcInterpolations()
 118: [00015A80] void RestoreInterpolations()
 119: [0001B670] void ()
 120: [0001B660] void ()
 121: [0001B650] void ()
 122: [00015AD0] void viewDrawChar(QFONT *, unsigned char, int, int, unsigned char *)
 123: [00015DB0] void viewDrawText(int, char *, int, int, int, int, int)
 124: [00015ED0] void viewTileSprite(int, int, int, int, int, int, int)
 125: [000161E0] void InitStatusBar()
 126: [0001B640] void ()
 127: [0001B630] void ()
 128: [0001B620] void ()
 181: [000161F0] void DrawStatSprite(int, int, int, int, int, unsigned int)
 182: [00016250] void DrawStatMaskedSprite(int, int, int, int, int, unsigned int)
 183: [000162B0] void DrawStatNumber(char *, int, int, int, int, int)
 184: [00016330] void TileHGauge(int, int, int, int, int)
 185: [00016390] void viewDrawPack(PLAYER *, int, int)
 186: [00016490] void UpdateStatusBar()
 187: [00016CB0] void viewInit()
 188: [00016DB0] void viewResizeView(int)
 189: [00017080] void UpdateFrame()
 190: [000171D0] void viewDrawInterface()
 191: [00017A10] void viewInsertTSprite(int, int, SPRITE *)
 192: [00017AF0] void viewAddEffect(int, VIEW_EFFECT)
 193: [00018560] void viewProcessSprites(int, int, int)
 194: [00018FD0] void CalcOtherPosition(SPRITE *, int *, int *, int *, int *, int, int)
 195: [00019290] void CalcPosition(SPRITE *, int *, int *, int *, int *, int, int)
 196: [00019550] void viewDrawSprite(int, int, int, int, int, char, char, unsigned short, int, int, int, int)
 197: [000195C0] void viewBurnTime(int)
 198: [00019690] void viewSetMessage(char *)
 199: [000196B0] void viewDisplayMessage()
 200: [000196C0] void viewSetErrorMessage(char *)
 201: [00019700] void DoLensEffect()
 202: [00019770] void UpdateDacs(int)
 203: [00019930] void viewDrawScreen()
 204: [0001B580] void ViewLoadSave::Load()
 205: [0001B5D0] void ViewLoadSave::Save()
 210: [0001B870] void InsertSpriteSect(int, int)
 211: [0001B930] void RemoveSpriteSect(int)
 212: [0001BA00] void InsertSpriteStat(int, int)
 213: [0001BAC0] void RemoveSpriteStat(int)
 216: [0001BCA0] void InsertSprite(int, int)
 217: [0001DAA0] void InsertFree(unsigned short *, int)
 227: [0001BD80] void DeleteSprite(int)
 229: [0001BE20] void ChangeSpriteSect(int, int)
 231: [0001BEE0] void ChangeSpriteStat(int, int)
 232: [0001BF90] void InitFreeList(unsigned short *, int)
 233: [0001BFC0] void dbInsertXSprite(int)
 234: [0001C070] void dbDeleteXSprite(int)
 235: [0001C140] void dbInsertXWall(int)
 236: [0001C1F0] void dbDeleteXWall(int)
 237: [0001C280] void dbInsertXSector(int)
 238: [0001C340] void dbDeleteXSector(int)
 239: [0001C3E0] void dbXSpriteClean()
 240: [0001C560] void dbXWallClean()
 241: [0001C760] void dbXSectorClean()
 242: [0001C980] void dbInit()
 243: [0001CA90] void PropagateMarkerReferences()
 244: [0001CCC0] void dbReadMapCRC(char *)
 245: [0001CE20] void dbLoadMap(const char *, int *, int *, int *, short *, short *, unsigned int *)
 246: [0001D570] void dbSaveMap(const char *, int, int, int, short, short)
 266: [0001DAC0] void AreSectorsNeighbors(int, int)
 267: [0001DB90] void FindSector(int, int, int, int *)
 268: [0001DCF0] void FindSector(int, int, int *)
 269: [0001DDE0] void CalcFrameRate()
 270: [0001DE40] void CheckProximity(SPRITE *, int, int, int, int, int)
 271: [0001DFE0] void CheckProximityPoint(int, int, int, int, int, int, int)
 272: [0001E060] void GetWallAngle(int)
 273: [0001E0A0] void GetWallNormal(int, int *, int *)
 274: [0001E140] void IntersectRay(int, int, int, int, int, int, int, int, int, int, int *, int *, int *)
 275: [0001E260] void HitScan(SPRITE *, int, int, int, int, unsigned int, int)
 276: [0001E540] void VectorScan(SPRITE *, int, int, int, int, int, int, int)
 277: [0001F180] void GetZRange(SPRITE *, int *, int *, int *, int *, int, unsigned int)
 278: [0001F3E0] void GetZRangeAtXYZ(int, int, int, int, int *, int *, int *, int *, int, unsigned int)
 279: [0001F610] void GetDistToLine(int, int, int, int, int, int)
 280: [0001F710] void ClipMove(int *, int *, int *, int *, int, int, int, int, int, unsigned int)
 281: [0001F7A0] void cansee(int, int, int, short, int, int, int, short)
 282: [0001FB70] void GetClosestSectors(int, int, int, int, short *, unsigned char *)
 283: [0001FDD0] void GetClosestSpriteSectors(int, int, int, int, short *, unsigned char *, short *)
 286: [000200C0] void InitSeedBuffers()
 287: [00020100] void BuildCoolTable()
 288: [00020140] void DoFireFrame()
 289: [000201F0] void FireInit()
 290: [00020270] void FireProcess()
 298: [000203F0] void GetWaveValue(int, int, int)
 299: [00020540] void DoSectorLighting()
 300: [00020900] void UndoSectorLighting()
 301: [000209D0] void DoSectorPanning()
 302: [00020F10] void InitSectorFX()
 314: [00021010] void ScaleLine(int, int, int, int, int)
 315: [000210D0] void DrawMap(int, int, int, int)
 318: [000216A0] void TimerRead()
 319: [000216E0] void TimerDone()
 320: [000216F0] void TimerSetup()
 321: [00021740] void timerRemove()
 322: [000217B0] void timerInstall()
 323: [00021810] void timerRegisterClient(/* Function pointer */ *, int)
 324: [00021850] void timerRemoveClient(/* Function pointer */ *)
 325: [000218A0] void timerSetClientRate(/* Function pointer */ *, int)
 347: [00021940] void .fn_init()
 348: [00021A00] void SetupLevelStatMenu()
 349: [00021A50] void SetupFragStatMenu()
 350: [00021A70] void levelClearSecrets()
 351: [00021A90] void levelSetupSecret(int)
 352: [00021AA0] void levelTriggerSecret(int)
 353: [00021B30] void CheckSectionAbend(char *)
 354: [00021B70] void CheckKeyAbend(char *, char *)
 355: [00021BD0] void levelGetInfoPtr(int, int)
 356: [00021C50] void levelGetFilename(int, int)
 357: [00021CD0] void levelGetMessage(int)
 358: [00021D60] void levelGetTitle()
 359: [00021DC0] void levelGetAuthor()
 360: [00021E20] void levelSetupOptions(int, int)
 361: [00021ED0] void levelLoadMapInfo(IniFile *, LEVELINFO *, char *)
 362: [00022060] void levelLoadDefaults()
 363: [000221B0] void levelAddUserMap(char *)
 364: [00022330] void levelGetNextLevels(int, int, int *, int *)
 365: [000223B0] void levelEndLevel(int)
 366: [000224B0] void levelStartGame()
 367: [00022510] void levelRestart()
 368: [00022550] void LevelsLoadSave::Load()
 369: [000225B0] void LevelsLoadSave::Save()
 379: [00022610] void .fn_init()
 380: [00022640] void FindChannel()
 381: [00022690] void sndPlaySong(char *, unsigned char)
 382: [00022750] void sndIsSongPlaying()
 383: [00022760] void sndFadeSong(int)
 384: [00022770] void sndSetMusicVolume(int)
 385: [00022780] void sndSetFXVolume(int)
 386: [00022790] void sndStopSong()
 387: [000227F0] void SoundCallback(unsigned int)
 388: [00022800] void sndStartSample(char *, int, int)
 389: [000228B0] void sndStartSample(unsigned int, int, int)
 390: [00022990] void sndStartWavID(unsigned int, int, int)
 391: [00022A30] void sndKillAllSounds()
 392: [00022A90] void sndProcess()
 393: [00022AD0] void InitSoundDevice()
 394: [00022BB0] void InitMusicDevice()
 395: [00022C30] void sndTerm()
 396: [00022C60] void sndInit()
 415: [00022CA0] void sfxInit()
 416: [00022CE0] void sfxTerm()
 417: [00022CF0] void Vol3d(int, int)
 418: [00022D20] void Calc3DValues(BONKLE *)
 419: [00022FD0] void sfxPlay3DSound(int, int, int, int, int)
 420: [000231D0] void sfxPlay3DSound(SPRITE *, int, int, int)
 421: [00023560] void sfxKill3DSound(SPRITE *, int)
 422: [00023620] void sfxKillAllSounds()
 423: [000236C0] void sfxUpdate3DSounds()
 424: [000238B0] void sfxSetReverb(unsigned char)
 431: [000238D0] void .fn_init()
 432: [00023920] void GetTime()
 433: [00023930] void SendCodes(unsigned char, unsigned char)
 434: [00023960] void ctrlInit()
 435: [00023CC0] void ctrlTerm()
 436: [00023CD0] void ctrlGetInput()
 437: [00024580] void ControlsLoadSave::Load()
 438: [000245B0] void ControlsLoadSave::Save()
 445: [00030DA0] void Random(int)
 446: [00030D80] void Chance(int)
 447: [00030D60] void IsDudeSprite(SPRITE *)
 448: [00030D50] void ()
 449: [00030D40] void CGibPosition::CGibPosition(int, int, int)
 450: [00030D30] void CGibVelocity::CGibVelocity(int, int, int)
 451: [00030D20] void ()
 452: [00030D10] void ()
 453: [00030D00] void ()
 454: [00030CF0] void ()
 455: [00030CE0] void ()
 473: [000245E0] void .fn_init()
 474: [00024680] void IsItemSprite(SPRITE *)
 475: [000246A0] void IsWeaponSprite(SPRITE *)
 476: [000246C0] void IsAmmoSprite(SPRITE *)
 477: [000246E0] void actSpriteOwnerToSpriteId(SPRITE *)
 478: [00024730] void actPropagateSpriteOwner(SPRITE *, /* Previous object (1) */ *)
 479: [00024790] void actSpriteIdToOwnerId(int)
 480: [00024800] void actOwnerIdToSpriteId(int)
 481: [00024830] void actAllocateSpares()
 482: [00024840] void actInit()
 483: [00024CC0] void ConcussSprite(int, SPRITE *, int, int, int, int)
 484: [00024EF0] void actWallBounceVector(int *, int *, int, int)
 485: [00024F90] void actFloorBounceVector(int *, int *, int *, int, int)
 486: [00025150] void actDropObject(SPRITE *, int)
 487: [00025390] void actHealDude(XSPRITE *, int, int)
 488: [00025510] void actKillDude(int, SPRITE *, DAMAGE_TYPE, int)
 489: [00026A50] void actDamageSprite(int, SPRITE *, DAMAGE_TYPE, int)
 490: [000270C0] void actHitcodeToData(int, HITINFO *, int *, SPRITE *, XSPRITE *, int *, WALL *, XWALL *, int *, SECTOR *, XSECTOR *)
 491: [00027300] void actImpactMissile(SPRITE *, int)
 492: [00027BD0] void actKickObject(SPRITE *, /* Previous object (1) */ *)
 493: [00027CC0] void actTouchFloor(SPRITE *, int)
 494: [00027E10] void ProcessTouchObjects(SPRITE *, int)
 495: [00028470] void actAirDrag(SPRITE *, int)
 496: [000285F0] void MoveThing(SPRITE *)
 497: [00028F90] void MoveDude(SPRITE *)
 498: [0002A370] void MoveMissile(SPRITE *)
 499: [0002A940] void actExplodeSprite(SPRITE *)
 500: [0002AD60] void actActivateGibObject(SPRITE *, XSPRITE *)
 501: [0002AE80] void IsUnderWater(SPRITE *)
 502: [0002AEE0] void actProcessSprites()
 503: [0002EBF0] void actSpawnSprite(int, int, int, int, int, unsigned char)
 504: [0002ECD0] void actSpawnSprite(SPRITE *, int)
 505: [0002EDF0] void actSpawnThing(int, int, int, int, int)
 506: [0002F0A0] SPRITE *actFireThing(SPRITE *, int, int, int, int)
 507: [0002F2B0] void actFireMissile(SPRITE *, int, int, int, int, int, int)
 508: [0002F8D0] void actGetRespawnTime(SPRITE *)
 509: [0002FA00] void actCheckRespawn(SPRITE *)
 510: [0002FB20] void actCanSplatWall(int)
 511: [0002FBE0] void actFireVector(SPRITE *, int, int, int, int, int, VECTOR_TYPE)
 512: [000306E0] void FireballSeqCallback(int, int)
 513: [00030770] void NapalmSeqCallback(int, int)
 514: [00030800] void TreeToGibCallback(int, int)
 515: [00030890] void DudeToGibCallback1(int, int)
 516: [00030940] void DudeToGibCallback2(int, int)
 517: [000309F0] void actPostSprite(int, int)
 518: [00030AE0] void actPostProcess()
 519: [00030B60] void MakeSplash(SPRITE *, XSPRITE *)
 520: [00030C40] void ActorLoadSave::Load()
 521: [00030C90] void ActorLoadSave::Save()
 527: [00036C80] void scale(int, int, int, int, int)
 543: [00030DC0] void .fn_init()
 544: [00030E30] void powerupCheck(PLAYER *, int)
 545: [00030E80] void powerupDraw(PLAYER *)
 546: [00030F40] void powerupActivate(PLAYER *, int)
 547: [00031050] void powerupDeactivate(PLAYER *, int)
 548: [00031120] void powerupProcess(PLAYER *)
 549: [00031190] void powerupClear(PLAYER *)
 550: [000311B0] void powerupInit()
 551: [000312C0] void packAddItem(PLAYER *, int)
 552: [00031340] void packCheckItem(PLAYER *, int)
 553: [00031360] void packItemActive(PLAYER *, int)
 554: [000313A0] void packUseItem(PLAYER *, int)
 555: [00031550] void packPrevItem(PLAYER *)
 556: [000315A0] void packNextItem(PLAYER *)
 557: [000315F0] void playerSeqPlaying(PLAYER *, int)
 558: [00031630] void playerSetRace(PLAYER *, int)
 559: [000316D0] void playerSetGodMode(PLAYER *, unsigned char)
 560: [00031720] void playerResetInertia(PLAYER *)
 561: [00031770] void playerStart(int)
 562: [00031B90] void playerReset(PLAYER *)
 563: [00031CD0] void playerInit(int, unsigned int)
 564: [00031D40] void PickupItem(PLAYER *, SPRITE *)
 565: [00031F10] void PickupAmmo(PLAYER *, SPRITE *)
 566: [00031FB0] void PickupWeapon(PLAYER *, SPRITE *)
 567: [000320D0] void PickUp(PLAYER *, SPRITE *)
 568: [00032600] void CheckPickUp(PLAYER *)
 569: [00032E10] void ActionScan(PLAYER *, int *, int *)
 570: [00033150] void ProcessInput(PLAYER *)
 571: [00034720] void playerProcess(PLAYER *)
 572: [00036150] void playerFireMissile(PLAYER *, int, int, int, int, int)
 573: [00036180] void playerFireThing(PLAYER *, int, int, int)
 574: [000361D0] void playerFrag(PLAYER *, /* Previous object (1) */ *)
 575: [00036380] void FragPlayer(PLAYER *, int)
 576: [00036430] void playerDamageArmor(PLAYER *, DAMAGE_TYPE, int)
 577: [000364E0] void playerDamageSprite(int, PLAYER *, DAMAGE_TYPE, int)
 578: [00036AA0] void playerLandingSound(PLAYER *)
 579: [00036AF0] void PlayerHeal(int, int)
 580: [00036B20] void PlayerKeelsOver(int, int)
 581: [00036B80] void PlayerLoadSave::Load()
 582: [00036C40] void PlayerLoadSave::Save()
 587: [00036CA0] void uninitcache()
 596: [00036D40] void overwritesprite(int, int, short, char, char, char)
 615: [00037040] void tileTerm()
 616: [00037080] void CalcPicsiz(int, int, int)
 617: [000370D0] void tileInit(unsigned char)
 618: [000373F0] void tileSaveArt()
 619: [00037680] void tileSaveArtInfo()
 620: [00037860] void tileShadeDirty()
 621: [00037870] void tileSurfDirty()
 622: [00037880] void tileVoxelDirty()
 623: [00037890] void tileMarkDirty(int)
 624: [000378B0] void tileMarkDirtyAll()
 625: [000378D0] void tilePurgeTile(int)
 626: [00037910] void tilePurgeAll()
 627: [00037940] void tileLoadTile(int)
 628: [00037AA0] void tileLockTile(int)
 629: [00037B00] void tileUnlockTile(int)
 630: [00037B70] void tileAllocTile(int, int, int)
 631: [00037C40] void tileFreeTile(int)
 632: [00037CD0] void tilePreloadTile(int)
 633: [00037DD0] void CompareTileFreqs(const void *, const void *)
 634: [00037E10] void tileBuildHistogram(int)
 635: [00038020] void tileDrawTileScreen(int, int, int, int)
 636: [00038680] void tilePick(int, int, int)
 637: [00038AD0] void tileGetSurfType(int)
 645: [0003EC20] void TestBitString(unsigned char *, int)
 646: [0003EC00] void SetBitString(unsigned char *, int)
 647: [0003EBB0] void viewBackupSpriteLoc(int, SPRITE *)
 648: [0003EB60] void viewInterpolateWall(int, WALL *)
 649: [0003EB00] void viewInterpolateSector(int, SECTOR *)
 653: [00038B70] void .fn_init()
 654: [00038C00] void GetWaveValue(unsigned int, int)
 655: [00038C70] void SetSpriteState(int, XSPRITE *, int)
 656: [00038DC0] void SetWallState(int, XWALL *, int)
 657: [00038F00] void SetSectorState(int, XSECTOR *, int)
 658: [00039090] void AddBusy(int, BUSYID, int)
 659: [00039140] void ReverseBusy(int, BUSYID)
 660: [00039190] void GetSourceBusy(EVENT)
 661: [000392C0] void OperateSprite(int, XSPRITE *, EVENT)
 662: [0003A180] void SetupGibWallState(WALL *, XWALL *)
 663: [0003A210] void OperateWall(int, XWALL *, EVENT)
 664: [0003A480] void SectorStartSound(int, int)
 665: [0003A540] void SectorEndSound(int, int)
 666: [0003A5F0] void PathSound(int, int)
 667: [0003A640] void DragPoint(int, int, int)
 668: [0003A800] void TranslateSector(int, int, int, int, int, int, int, int, int, int, int, unsigned char)
 669: [0003AE80] void ZTranslateSector(int, XSECTOR *, int, int)
 670: [0003B1E0] void GetHighestSprite(int, int, int *)
 671: [0003B2E0] void GetCrushedSpriteExtents(unsigned int, int *, int *)
 672: [0003B420] void VCrushBusy(unsigned int, unsigned int)
 673: [0003B660] void VSpriteBusy(unsigned int, unsigned int)
 674: [0003B910] void VDoorBusy(unsigned int, unsigned int)
 675: [0003BDC0] void HDoorBusy(unsigned int, unsigned int)
 676: [0003BF60] void RDoorBusy(unsigned int, unsigned int)
 677: [0003C0F0] void StepRotateBusy(unsigned int, unsigned int)
 678: [0003C2B0] void GenSectorBusy(unsigned int, unsigned int)
 679: [0003C3B0] void PathBusy(unsigned int, unsigned int)
 680: [0003C5E0] void OperateDoor(unsigned int, XSECTOR *, EVENT, BUSYID)
 681: [0003C7A0] void OperateTeleport(unsigned int, XSECTOR *)
 682: [0003C910] void OperatePath(unsigned int, XSECTOR *, EVENT)
 683: [0003CB20] void OperateSector(unsigned int, XSECTOR *, EVENT)
 684: [0003CE60] void InitPath(unsigned int, XSECTOR *)
 685: [0003CF40] void LinkSector(int, XSECTOR *, EVENT)
 686: [0003D020] void LinkSprite(int, XSPRITE *, EVENT)
 687: [0003D130] void LinkWall(int, XWALL *, EVENT)
 688: [0003D180] void trTriggerSector(unsigned int, XSECTOR *, int)
 689: [0003D240] void trMessageSector(unsigned int, EVENT)
 690: [0003D310] void trTriggerWall(unsigned int, XWALL *, int)
 691: [0003D3C0] void trMessageWall(unsigned int, EVENT)
 692: [0003D480] void trTriggerSprite(unsigned int, XSPRITE *, int)
 693: [0003D520] void trMessageSprite(unsigned int, EVENT)
 694: [0003D5D0] void ProcessMotion()
 695: [0003DA70] void AlignSlopes()
 696: [0003DB90] void trProcessBusy()
 697: [0003DC80] void trInit()
 698: [0003E3F0] void trTextOver(int)
 699: [0003E400] void InitGenerator(int)
 700: [0003E530] void ActivateGenerator(int)
 701: [0003E8A0] void FireballTrapSeqCallback(int, int)
 702: [0003E930] void MGunFireSeqCallback(int, int)
 703: [0003EA60] void MGunOpenSeqCallback(int, int)
 704: [0003EA80] void TriggersLoadSave::Load()
 705: [0003EAC0] void TriggersLoadSave::Save()
 717: [0003EC40] void .fn_init()
 718: [0003EC90] void EventQueue::Kill(int, int)
 719: [0003ECF0] void EventQueue::Kill(int, int, CALLBACK_ID)
 720: [0003ED70] void GetBucketChannel(RXBUCKET *)
 721: [0003EEB0] void CompareChannels(const void *, const void *)
 722: [0003EED0] void evInit()
 723: [0003F160] void evGetSourceState(int, int)
 724: [0003F260] void evSend(int, int, int, COMMAND_ID)
 725: [0003F560] void evPost(int, int, unsigned int, COMMAND_ID)
 726: [0003F620] void evPost(int, int, unsigned int, CALLBACK_ID)
 727: [0003F690] void evProcess(unsigned int)
 728: [0003F7A0] void evKill(int, int)
 729: [0003F7C0] void evKill(int, int, CALLBACK_ID)
 730: [0003F7E0] void EventQLoadSave::Load()
 731: [0003F820] void EventQLoadSave::Save()
 736: [0003F860] void qavRegisterClient(/* Function pointer */ *)
 737: [0003F8A0] void DrawFrame(int, int, TILE_FRAME *, int, int)
 738: [0003F950] void QAV::Draw(int, int, int)
 739: [0003FAB0] void QAV::Play(int, int, int, void *)
 740: [0003FB60] void QAV::Preload()
 743: [00045040] void BiRandom(int)
 744: [00045030] void ()
 745: [0003FBD0] void .fn_init()
 746: [0003FDC0] void CheckAmmo(PLAYER *, int, int)
 747: [0003FE30] void UseAmmo(PLAYER *, int, int)
 748: [00045020] void ()
 749: [00045010] void ()
 776: [0003FE60] void SpawnBulletEject(PLAYER *, int, int)
 777: [00040020] void SpawnShellEject(PLAYER *, int, int)
 778: [000401D0] void WeaponInit()
 779: [00040230] void WeaponDraw(PLAYER *, int, int, int)
 780: [000402E0] void WeaponPlay(PLAYER *)
 781: [00040330] void StartQAV(PLAYER *, int, int, unsigned char)
 782: [00040390] void UpdateAimVector(PLAYER *)
 783: [00040C90] void WeaponRaise(PLAYER *)
 784: [00041160] void WeaponLower(PLAYER *)
 785: [00041620] void WeaponUpdateState(PLAYER *)
 786: [00041B40] void FirePitchfork(int, PLAYER *)
 787: [00041C10] void FireSpray(int, PLAYER *)
 788: [00041C90] void ThrowCan(int, PLAYER *)
 789: [00041D40] void DropCan(int, PLAYER *)
 790: [00041D90] void ExplodeCan(int, PLAYER *)
 791: [00041E00] void ThrowBundle(int, PLAYER *)
 792: [00041EB0] void DropBundle(int, PLAYER *)
 793: [00041F00] void ExplodeBundle(int, PLAYER *)
 794: [00041F70] void ThrowProx(int, PLAYER *)
 795: [00041FF0] void DropProx(int, PLAYER *)
 796: [00042040] void ThrowRemote(int, PLAYER *)
 797: [000420F0] void DropRemote(int, PLAYER *)
 798: [00042160] void FireRemote(int, PLAYER *)
 799: [00042180] void FireShotgun(int, PLAYER *)
 800: [00042340] void EjectShell(int, PLAYER *)
 801: [00042370] void FireTommy(int, PLAYER *)
 802: [000425A0] void FireSpread(int, PLAYER *)
 803: [00042740] void AltFireSpread(int, PLAYER *)
 804: [000429A0] void FireFlare(int, PLAYER *)
 805: [00042A20] void AltFireFlare(int, PLAYER *)
 806: [00042AB0] void FireVoodoo(int, PLAYER *)
 807: [00042C80] void FireSpear(int, PLAYER *)
 808: [00042D10] void FireShadow(int, PLAYER *)
 809: [00042D80] void AltFireShadow(int, PLAYER *)
 810: [00042E00] void FireReanimator(int, PLAYER *)
 811: [00042E10] void FireStaff(int, PLAYER *)
 812: [00042E80] void FireStaff2(int, PLAYER *)
 813: [00042FF0] void FireBeast(int, PLAYER *)
 814: [00043070] void WeaponUpgrade(PLAYER *, unsigned char)
 815: [000430C0] void WeaponFindNext(PLAYER *, int *, unsigned char)
 816: [000432A0] void WeaponFindLoaded(PLAYER *, int *)
 817: [000434A0] void WeaponProcess(PLAYER *)
 818: [00044FF0] void WeaponLoadSave::Load()
 819: [00045000] void WeaponLoadSave::Save()
 834: [00047450] void VGT::SetColor(int)
 835: [00047420] void Widget::Widget(int, int, int, int)
 836: [00047410] void Widget::~Widget()
 837: [00047400] void Widget::EndModal(MODAL_RESULT)
 838: [000473C0] void HeadWidget::HeadWidget()
 839: [000473B0] void HeadWidget::Paint(int, int, unsigned char)
 840: [000473A0] void HeadWidget::HandleEvent(GEVENT *)
 841: [00047390] void Label::HandleEvent(GEVENT *)
 842: [00045060] void .fn_init()
 843: [00045090] void SetBlinkOn()
 844: [000450A0] void SetBlinkOff()
 845: [000450B0] void IsBlinkOn()
 846: [000450C0] void UpdateBlinkClock(int)
 847: [000450F0] void CenterLabel(int, int, char *, int)
 848: [00045150] void DrawBevel(int, int, int, int, int, int)
 849: [000451B0] void DrawRect(int, int, int, int, int)
 850: [00045200] void DrawButtonFace(int, int, int, int, unsigned char)
 851: [00045310] void DrawMouseCursor(int, int)
 852: [00045350] void GetHotKey(char *)
 853: [00045380] void Label::Label(int, int, char *)
 854: [00045400] void Label::Paint(int, int, unsigned char)
 855: [00045420] void Container::Container(int, int, int, int)
 856: [000454B0] void Container::~Container()
 857: [00045520] void Container::SetFocus(int)
 858: [00045570] void Container::Insert(Widget *)
 859: [000455B0] void Container::Remove(Widget *)
 860: [000455E0] void Container::Paint(int, int, unsigned char)
 861: [00045640] void Container::HandleEvent(GEVENT *)
 862: [00045770] void Container::EndModal(MODAL_RESULT)
 863: [00045790] void Panel::Paint(int, int, unsigned char)
 864: [000458E0] void TitleBar::TitleBar(int, int, int, int, char *)
 865: [00045950] void TitleBar::Paint(int, int, unsigned char)
 866: [000459D0] void TitleBar::HandleEvent(GEVENT *)
 867: [00045A10] void Window::Window(int, int, int, int, char *)
 868: [00045AD0] void Button::Paint(int, int, unsigned char)
 869: [00045B70] void Button::HandleEvent(GEVENT *)
 870: [00045CC0] void TextButton::TextButton(int, int, int, int, char *, MODAL_RESULT)
 871: [00045D30] void TextButton::Paint(int, int, unsigned char)
 872: [00045EF0] void TextButton::HandleEvent(GEVENT *)
 873: [00045F50] void BitButton::Paint(int, int, unsigned char)
 874: [00046070] void EditText::EditText(int, int, int, int, char *)
 875: [00046100] void EditText::Paint(int, int, unsigned char)
 876: [00046230] void EditText::HandleEvent(GEVENT *)
 877: [00046480] void EditNumber::EditNumber(int, int, int, int, int)
 878: [000464E0] void EditNumber::HandleEvent(GEVENT *)
 879: [00046630] void ThumbButton::HandleEvent(GEVENT *)
 880: [000466E0] void ScrollButton::HandleEvent(GEVENT *)
 881: [00046790] void ScrollLineUp(Widget *)
 882: [000467A0] void ScrollLineDown(Widget *)
 883: [000467B0] void ScrollBar::ScrollBar(int, int, int, int, int, int)
 884: [00046940] void ScrollBar::ScrollRelative(int)
 885: [00046980] void ScrollBar::Paint(int, int, unsigned char)
 886: [00046A10] void GetEvent(GEVENT *)
 887: [00046CA0] void ShowModal(Container *)
 888: [00046FC0] void GetStringBox(char *, char *)
 889: [00047350] void ScrollBar::~ScrollBar()
 890: [00047320] void ScrollButton::~ScrollButton()
 891: [000472F0] void ThumbButton::~ThumbButton()
 892: [000472C0] void EditNumber::~EditNumber()
 893: [00047290] void EditText::~EditText()
 894: [00047260] void BitButton::~BitButton()
 895: [00047230] void TextButton::~TextButton()
 896: [00047200] void Button::~Button()
 897: [000471C0] void Window::~Window()
 898: [00047190] void TitleBar::~TitleBar()
 899: [00047150] void Panel::~Panel()
 933: [00047120] void Label::~Label()
 934: [000470F0] void HeadWidget::~HeadWidget()
 935: [00047060] void GetNumberBox(char *, int, int)
 946: [00047460] void .fn_init()
 947: [000474B0] void seqRegisterClient(/* Function pointer */ *)
 948: [000474F0] void Seq::Preload()
 949: [00047590] void UpdateSprite(int, SEQFRAME *)
 950: [00047760] void UpdateWall(int, SEQFRAME *)
 951: [00047850] void UpdateMasked(int, SEQFRAME *)
 952: [00047990] void UpdateFloor(int, SEQFRAME *)
 953: [00047A50] void UpdateCeiling(int, SEQFRAME *)
 954: [00047B20] void SEQINST::Update(ACTIVE *)
 955: [00048230] void GetInstance(int, int)
 956: [00048380] void UnlockInstance(SEQINST *)
 957: [00048400] void seqSpawn(int, int, int, int)
 958: [00048600] void seqKill(int, int)
 959: [000486B0] void seqKillAll()
 960: [000487A0] void seqGetStatus(int, int)
 961: [000487C0] void seqGetID(int, int)
 962: [000487D0] void seqMoveInstance(int, int, int)
 963: [00048840] void seqProcess(int)
 964: [00048A30] void SeqLoadSave::Load()
 965: [00048B90] void SeqLoadSave::Save()
 972: [00048C20] void .fn_init()
 973: [00048C70] void InitMirrors()
 974: [00049140] void TranslateMirrorColors(int, int)
 975: [00049190] void DrawMirrors(int, int, int, int, int)
 976: [000495A0] void MirrorLoadSave::Load()
 977: [00049600] void MirrorLoadSave::Save()
 988: [00049660] void .fn_init()
 989: [000496E0] void warpInit()
 990: [000499C0] void CheckLink(SPRITE *)
 991: [00049C00] void CheckLink(int *, int *, int *, int *)
 992: [00049E60] void WarpLoadSave::Load()
 993: [00049EB0] void WarpLoadSave::Save()
1000: [00049F00] void .fn_init()
1001: [00049F30] void weatherInit()
1002: [00049F80] void weatherDraw(char *, int, int, int, int, int, int, int, int)
1003: [0004A100] void weatherSetParticle(short, short)
1004: [0004A150] void CWeather::CWeather()
1005: [0004A1D0] void CWeather::~CWeather()
1006: [0004A250] void CWeather::RandomizeVectors()
1007: [0004A2B0] void CWeather::SetDefaultBuffer(unsigned char *, int, int, int *)
1008: [0004A2E0] void CWeather::SetParticles(short, short, short)
1009: [0004A360] void CWeather::SetTranslucency(int)
1010: [0004A390] void CWeather::SetColor(unsigned char)
1011: [0004A3C0] void CWeather::SetColorShift(unsigned char)
1012: [0004A3F0] void CWeather::Initialize(unsigned char *, int, int, int, int, int *, short, short, short)
1013: [0004A4D0] void CWeather::Draw(unsigned char *, int, int, int, int, int *, int, int, int, int, int, int, int)
1014: [0004A780] void CWeather::Draw(int, int, int, int, int, int)
1015: [0004A7E0] void CWeather::SetWeatherType(WEATHERTYPE)
1022: [0004A880] void Wait(int)
1023: [0004A8C0] void DoFade(unsigned char, unsigned char, unsigned char, int)
1024: [0004A970] void DoUnFade(int)
1025: [0004AA10] void credLogos()
1026: [0004AB90] void DrawCreditText(char *, int, int, int)
1027: [0004ACC0] void credCredits()
1033: [0004F430] void ()
1034: [0004F400] void CMenuMgr::CMenuMgr()
1035: [0004F3D0] void CMenuMgr::~CMenuMgr()
1036: [0004AF40] void .fn_init()
1037: [0004C1E0] void SetupLoadingScreen()
1038: [0004C210] void SetupKeyListMenu()
1039: [0004C250] void SetupMessagesMenu()
1040: [0004C310] void SetupControlsMenu()
1041: [0004C3A0] void SetupOptionsMenu()
1042: [0004C590] void SetupDifficultyMenu()
1043: [0004C610] void SetupEpisodeMenu()
1044: [0004C720] void SetupMainMenu()
1045: [0004C7D0] void SetupMainMenuWithSave()
1046: [0004C890] void SetupNetStartMenu()
1047: [0004C9F0] void SetupSaveGameMenu()
1048: [0004CAE0] void SetupLoadGameMenu()
1049: [0004CC10] void SetupSoundsMenu()
1050: [0004CCE0] void SetupQuitMenu()
1051: [0004CD30] void SetupHelpOrderMenu()
1052: [0004CDC0] void SetupCreditsMenu()
1053: [0004CE00] void SetupParentalLockMenu()
1054: [0004CE80] void SetupSorryMenu()
1055: [0004CEE0] void SetupMenus()
1056: [0004CF50] void SetCrosshair(CGameMenuItemZBool *)
1057: [0004CF60] void SetShowWeapons(CGameMenuItemZBool *)
1058: [0004CF70] void SetSlopeTilting(CGameMenuItemZBool *)
1059: [0004CF80] void SetViewBobbing(CGameMenuItemZBool *)
1060: [0004CF90] void SetViewSwaying(CGameMenuItemZBool *)
1061: [0004CFA0] void SetDetail(CGameMenuItemSlider *)
1062: [0004CFB0] void SetGamma(CGameMenuItemSlider *)
1063: [0004CFC0] void SetMusicVol(CGameMenuItemSlider *)
1064: [0004CFD0] void SetSoundVol(CGameMenuItemSlider *)
1065: [0004CFE0] void SetCDVol(CGameMenuItemSlider *)
1066: [0004CFF0] void SetMessages(CGameMenuItemZBool *)
1067: [0004D010] void SetMouseSensitivity(CGameMenuItemSlider *)
1068: [0004D020] void SetDifficultyAndStart(CGameMenuItemChain *)
1069: [0004D080] void SaveGame(CGameMenuItemZEdit *, CGameMenuEvent *)
1070: [0004D170] void QuickSaveGame()
1071: [0004D250] void LoadGame(CGameMenuItemZEdit *, CGameMenuEvent *)
1072: [0004D2C0] void QuickLoadGame()
1073: [0004D320] void Credits(CGameMenuItemChain *)
1074: [0004D320] void Help(CGameMenuItemChain *)
1075: [0004D330] void SetupNetLevels(CGameMenuItemZCycle *)
1076: [0004D340] void SetupLevelMenuItem(int)
1077: [0004D3B0] void StartNetGame(CGameMenuItemChain *)
1078: [0004D480] void Quit(CGameMenuItemChain *)
1079: [0004D4B0] void SetParentalLock(CGameMenuItemZBool *)
1080: [0004D530] void GetStringWidth(int, char *)
1081: [0004D5B0] void GetFontInfo(int, char *, int *, int *)
1082: [0004D660] void menuDrawText(int, char *, int, int, int, int)
1083: [0004D740] void CMenuMgr::CanSelect(int)
1084: [0004D780] void CMenuMgr::CanShow(int)
1085: [0004D7C0] void CMenuMgr::Push(MENU *, int)
1086: [0004D820] void CMenuMgr::Pop()
1087: [0004D850] void CMenuMgr::LockFont(int)
1088: [0004D8B0] void CMenuMgr::UnlockFont()
1089: [0004D8E0] void CMenuMgr::DrawText(char *, int, int, int, int)
1090: [0004D900] void CMenuMgr::Select(MENU *, int)
1091: [0004DA80] void CMenuMgr::Process()
1092: [0004E1A0] void CMenuMgr::Draw()
1093: [0004EDA0] void SetSkill(int)
1094: [0004EDD0] void Quit(int)
1095: [0004EE10] void SaveGame(int)
1096: [0004EEF0] void LoadGame(int)
1097: [0004EF20] void SetMouseSensitivity(int)
1098: [0004EF30] void GetGameKeySetup(int)
1099: [0004EF70] void MultiSetEpisode(int)
1100: [0004F000] void SetGamma(int)
1101: [0004F010] void GetUserMap(int)
1102: [0004F070] void StartGame(int)
1257: [0004F3C0] void CGameMenuItemChain::~CGameMenuItemChain()
1258: [0004F110] void SetGameMessages(int)
1259: [0004F130] void SetupEpisodes(int)
1260: [0004F1B0] void SetSkillAndStartGame(int)
1261: [0004F1F0] void SetEpisode(int)
1262: [0004F200] void MenuSetupEpisodeInfo()
1271: [0004F440] void .fn_init()
1272: [0004F460] void SetGodMode(unsigned char)
1273: [0004F490] void SetClipMode(unsigned char)
1274: [0004F4B0] void packStuff(PLAYER *)
1275: [0004F4E0] void packClear(PLAYER *)
1276: [0004F520] void SetAmmo(unsigned char)
1277: [0004F5F0] void SetWeapons(unsigned char)
1278: [0004F670] void SetToys(unsigned char)
1279: [0004F6A0] void SetArmor(unsigned char)
1280: [0004F6F0] void SetKeys(unsigned char)
1281: [0004F730] void SetInfiniteAmmo(unsigned char)
1282: [0004F750] void SetMap(unsigned char)
1283: [0004F770] void SetWooMode(unsigned char)
1284: [0004F7C0] void ToggleWooMode()
1285: [0004F7F0] void ToggleBoots()
1286: [0004F840] void ToggleInvisibility()
1287: [0004F890] void ToggleInvulnerability()
1288: [0004F8E0] void ToggleDelirium()
1289: [0004F930] void LevelWarp()
1290: [0004FA00] void CGameMessageMgr::CGameMessageMgr()
1291: [0004FA60] void CGameMessageMgr::SetState(unsigned char)
1292: [0004FA80] void CGameMessageMgr::Add(char *, unsigned char)
1293: [0004FB30] void CGameMessageMgr::Display()
1294: [0004FC60] void CGameMessageMgr::Clear()
1295: [0004FC80] void CGameMessageMgr::SetMaxMessages(int)
1296: [0004FCA0] void CGameMessageMgr::SetFont(int)
1297: [0004FD20] void CGameMessageMgr::SetCoordinates(int, int)
1298: [0004FD60] void CGameMessageMgr::SetMessageTime(int)
1299: [0004FD80] void CGameMessageMgr::SetMessageFlags(unsigned int)
1300: [0004FD90] void CPlayerMsg::Clear()
1301: [0004FDA0] void CPlayerMsg::Term()
1302: [0004FDB0] void CPlayerMsg::Draw()
1303: [0004FE60] void CPlayerMsg::AddChar(unsigned char)
1304: [0004FE90] void CPlayerMsg::DelChar()
1305: [0004FEB0] void CPlayerMsg::Set(char *)
1306: [0004FEF0] void CPlayerMsg::Send()
1307: [00050010] void CPlayerMsg::ProcessKeys()
1308: [00050130] void CCheatMgr::Check(char *)
1309: [00050210] void CCheatMgr::Process(CHEATCODE)
1320: [000506F0] void .fn_init()
1321: [00050740] void aiPlay3DSound(SPRITE *, int, AI_SFX_PRIORITY, int)
1322: [000507B0] void aiNewState(SPRITE *, XSPRITE *, AISTATE *)
1323: [00050850] void CanMove(SPRITE *, int, int, int)
1324: [00050B20] void aiChooseDirection(SPRITE *, XSPRITE *, int)
1325: [00050ED0] void aiMoveForward(SPRITE *, XSPRITE *)
1326: [00050FD0] void aiMoveTurn(SPRITE *, XSPRITE *)
1327: [00051070] void aiMoveDodge(SPRITE *, XSPRITE *)
1328: [000512E0] void aiActivateDude(SPRITE *, XSPRITE *)
1329: [00051CD0] void aiSetTarget(XSPRITE *, int, int, int)
1330: [00051D10] void aiSetTarget(XSPRITE *, int)
1331: [00051E00] void aiDamageSprite(SPRITE *, XSPRITE *, int, DAMAGE_TYPE, int)
1332: [00052310] void RecoilDude(SPRITE *, XSPRITE *)
1333: [000527D0] void aiThinkTarget(SPRITE *, XSPRITE *)
1334: [000529C0] void aiProcessDudes()
1335: [00052BC0] void aiInit()
1336: [00052E90] void AILoadSave::Load()
1337: [00052EC0] void AILoadSave::Save()

/********************* AI functions for entities starts here *********************/

// aibat.cpp
1356: [00052EF0] void .fn_init()
1357: [00052F10] void BiteSeqCallback(int, int)
1358: [00053070] void thinkTarget(SPRITE *, XSPRITE *)
1359: [00053310] void thinkSearch(SPRITE *, XSPRITE *)
1360: [00053340] void thinkGoto(SPRITE *, XSPRITE *)
1361: [00053420] void thinkPonder(SPRITE *, XSPRITE *)
1362: [000538A0] void MoveDodgeUp(SPRITE *, XSPRITE *)
1363: [00053A60] void MoveDodgeDown(SPRITE *, XSPRITE *)
1364: [00053C30] void thinkChase(SPRITE *, XSPRITE *)
1365: [00054040] void MoveForward(SPRITE *, XSPRITE *)
1366: [00054280] void MoveSwoop(SPRITE *, XSPRITE *)
1367: [000544C0] void MoveFly(SPRITE *, XSPRITE *)
1368: [000546F0] void MoveToCeil(SPRITE *, XSPRITE *)

// aiboneel.cpp
1389: [00054770] void .fn_init()
1390: [00054790] void BiteSeqCallback(int, int)
1391: [000548F0] void thinkTarget(SPRITE *, XSPRITE *)
1392: [00054BB0] void thinkSearch(SPRITE *, XSPRITE *)
1393: [00054BE0] void thinkGoto(SPRITE *, XSPRITE *)
1394: [00054CC0] void thinkPonder(SPRITE *, XSPRITE *)
1395: [00055140] void MoveDodgeUp(SPRITE *, XSPRITE *)
1396: [00055300] void MoveDodgeDown(SPRITE *, XSPRITE *)
1397: [000554D0] void thinkChase(SPRITE *, XSPRITE *)
1398: [00055930] void MoveForward(SPRITE *, XSPRITE *)
1399: [00055B60] void MoveSwoop(SPRITE *, XSPRITE *)
1400: [00055D80] void MoveAscend(SPRITE *, XSPRITE *)
1401: [00055FA0] void MoveToCeil(SPRITE *, XSPRITE *)

// aiburn.cpp
1420: [00056020] void .fn_init()
1421: [00056050] void BurnSeqCallback(int, int)
1422: [00056060] void thinkSearch(SPRITE *, XSPRITE *)
1423: [000560A0] void thinkGoto(SPRITE *, XSPRITE *)
1424: [00056220] void thinkChase(SPRITE *, XSPRITE *)

// aicerber.cpp
1448: [00056610] void .fn_init()
1449: [00056680] void BiteSeqCallback(int, int)
1450: [000567B0] void BurnSeqCallback(int, int)
1451: [00056CC0] void BurnSeqCallback2(int, int)
1452: [000571D0] void thinkSearch(SPRITE *, XSPRITE *)
1453: [00057200] void thinkGoto(SPRITE *, XSPRITE *)
1454: [00057310] void thinkChase(SPRITE *, XSPRITE *)

// aicult.cpp
1479: [00057790] void .fn_init()
1480: [00057810] void TommySeqCallback(int, int)
1481: [00057920] void ShotSeqCallback(int, int)
1482: [00057AA0] void ThrowSeqCallback(int, int)
1483: [00057B70] bool TargetNearExplosion(SPRITE *)
1484: [00057BC0] void thinkSearch(SPRITE *, XSPRITE *)
1485: [00057BF0] void thinkGoto(SPRITE *, XSPRITE *)
1486: [00057D00] void thinkChase(SPRITE *, XSPRITE *)

// aigarg.cpp
1523: [000587F0] void .fn_init()
1524: [00058860] void SlashFSeqCallback(int, int)
1525: [000589D0] void ThrowFSeqCallback(int, int)
1526: [00058A20] void BlastSSeqCallback(int, int)
1527: [00058FD0] void ThrowSSeqCallback(int, int)
1528: [00059040] void thinkTarget(SPRITE *, XSPRITE *)
1529: [000592F0] void thinkSearch(SPRITE *, XSPRITE *)
1530: [00059320] void thinkGoto(SPRITE *, XSPRITE *)
1531: [00059400] void thinkPonder(SPRITE *, XSPRITE *)
1532: [00059980] void MoveDodgeUp(SPRITE *, XSPRITE *)
1533: [00059B40] void MoveDodgeDown(SPRITE *, XSPRITE *)
1534: [00059D10] void thinkChase(SPRITE *, XSPRITE *)
1535: [0005A2C0] void entryFStatue(SPRITE *, XSPRITE *)
1536: [0005A2F0] void entrySStatue(SPRITE *, XSPRITE *)
1537: [0005A320] void MoveForward(SPRITE *, XSPRITE *)
1538: [0005A560] void MoveSlow(SPRITE *, XSPRITE *)
1539: [0005A7D0] void MoveSwoop(SPRITE *, XSPRITE *)
1540: [0005AA30] void MoveFly(SPRITE *, XSPRITE *)

// aigilbst.cpp
1556: [0005AC70] void .fn_init()
1557: [0005AC90] void GillBiteSeqCallback(int, int)
1558: [0005AE10] void thinkSearch(SPRITE *, XSPRITE *)
1559: [0005AE40] void thinkGoto(SPRITE *, XSPRITE *)
1560: [0005AF50] void thinkChase(SPRITE *, XSPRITE *)

// aighost.cpp
1583: [0005B450] void .fn_init()
1584: [0005B4A0] void SlashSeqCallback(int, int)
1585: [0005B530] void ThrowSeqCallback(int, int)
1586: [0005B5E0] void BlastSeqCallback(int, int)
1587: [0005BB80] void thinkTarget(SPRITE *, XSPRITE *)
1588: [0005BE40] void thinkSearch(SPRITE *, XSPRITE *)
1589: [0005BE70] void thinkGoto(SPRITE *, XSPRITE *)
1590: [0005BF50] void thinkPonder(SPRITE *, XSPRITE *)
1591: [0005C480] void MoveDodgeUp(SPRITE *, XSPRITE *)
1592: [0005C640] void MoveDodgeDown(SPRITE *, XSPRITE *)
1593: [0005C810] void thinkChase(SPRITE *, XSPRITE *)
1594: [0005CC90] void MoveForward(SPRITE *, XSPRITE *)
1595: [0005CED0] void MoveSlow(SPRITE *, XSPRITE *)
1596: [0005D100] void MoveSwoop(SPRITE *, XSPRITE *)
1597: [0005D350] void MoveFly(SPRITE *, XSPRITE *)

// aihand.cpp
1603: [0005D580] void .fn_init()
1604: [0005D5B0] void HandChokeSeqCallback(int, int)
1605: [0005D710] void HandJumpSeqCallback(int, int)
1606: [0005D8A0] void thinkSearch(SPRITE *, XSPRITE *)
1607: [0005D8D0] void thinkGoto(SPRITE *, XSPRITE *)
1608: [0005D9B0] void thinkChase(SPRITE *, XSPRITE *)

// aihound.cpp
1619: [0005DC90] void .fn_init()
1620: [0005DCD0] void BiteSeqCallback(int, int)
1621: [0005DDE0] void BurnSeqCallback(int, int)
1622: [0005DE50] void thinkSearch(SPRITE *, XSPRITE *)
1623: [0005DE80] void thinkGoto(SPRITE *, XSPRITE *)
1624: [0005DF60] void thinkChase(SPRITE *, XSPRITE *)

// airat.cpp
1635: [0005E240] void .fn_init()
1636: [0005E260] void BiteSeqCallback(int, int)
1637: [0005E360] void thinkSearch(SPRITE *, XSPRITE *)
1638: [0005E390] void thinkGoto(SPRITE *, XSPRITE *)
1639: [0005E470] void thinkChase(SPRITE *, XSPRITE *)

// aispid.cpp
1649: [0005E710] void .fn_init()
1650: [0005E750] void SpidBiteSeqCallback(int, int)
1651: [0005EA40] void SpidJumpSeqCallback(int, int)
1652: [0005EC30] void thinkSearch(SPRITE *, XSPRITE *)
1653: [0005EC60] void thinkGoto(SPRITE *, XSPRITE *)
1654: [0005ED40] void thinkChase(SPRITE *, XSPRITE *)

// aizomba.cpp
1678: [0005F0C0] void .fn_init()
1679: [0005F100] void HackSeqCallback(int, int)
1680: [0005F250] void StandSeqCallback(int, int)
1681: [0005F290] void thinkSearch(SPRITE *, XSPRITE *)
1682: [0005F2C0] void thinkGoto(SPRITE *, XSPRITE *)
1683: [0005F3C0] void thinkChase(SPRITE *, XSPRITE *)
1684: [0005F670] void thinkPonder(SPRITE *, XSPRITE *)
1685: [0005F900] void myThinkTarget(SPRITE *, XSPRITE *)
1686: [0005FAE0] void myThinkSearch(SPRITE *, XSPRITE *)
1687: [0005FB10] void entryEZombie(SPRITE *, XSPRITE *)
1688: [0005FB20] void entryAIdle(SPRITE *, XSPRITE *)
1689: [0005FB30] void entryEStand(SPRITE *, XSPRITE *)

// aizombf.cpp
1701: [0005FB70] void .fn_init()
1702: [0005FBC0] void HackSeqCallback(int, int)
1703: [0005FCA0] void PukeSeqCallback(int, int)
1704: [0005FDE0] void ThrowSeqCallback(int, int)
1705: [0005FE70] void thinkSearch(SPRITE *, XSPRITE *)
1706: [0005FEA0] void thinkGoto(SPRITE *, XSPRITE *)
1707: [0005FF80] void thinkChase(SPRITE *, XSPRITE *)

/********************* AI functions for entities ends here *********************/

// fx.cpp
1714: [000603E0] void fxProcess()
1715: [000606C0] void fxSpawn(int, int, int, int, int, unsigned int)
1716: [000608B0] void fxSpawnBlood(SPRITE *, int)
1718: [00060970] void FlameLick(int)
1719: [00060BA0] void Remove(int)
1720: [00060BF0] void FlareBurst(int)
1721: [00060D90] void FlareSpark(int)
1722: [00060E50] void FlareSparkLite(int)
1723: [00060F10] void ZombieSpurt(int)
1724: [00061110] void BloodSpurt(int)
1725: [00061190] void SpearBubble(int)
1726: [00061220] void DynPuff(int)
1727: [00061310] void Respawn(int)
1728: [00061570] void PlayerBubble(int)
1729: [000617E0] void EnemyBubble(int)
1730: [000619F0] void CounterCheck(int)
1734: [00061AF0] void .fn_init()
1735: [00061B40] void LoadSave::Load()
1736: [00061B60] void LoadSave::Save()
1737: [00061B80] void LoadSave::Read(void *, int)
1738: [00061BE0] void LoadSave::Write(void *, int)
1739: [00061C40] void LoadSave::LoadGame(char *)
1740: [00061EA0] void LoadSave::SaveGame(char *)
1741: [00061F20] void MyLoadSave::Load()
1742: [00062200] void MyLoadSave::Save()
1743: [000624E0] void LoadSavedInfo()
1800: [000625F0] void SCRIPT_GetBool(int, char *, char *, unsigned char *)
1801: [00062620] void CONFIG_GetSetupFilename()
1802: [000628A0] void CONFIG_FunctionNameToNum(char *)
1803: [000628D0] void CONFIG_FunctionNumToName(int)
1804: [000628E0] void CONFIG_AnalogNameToNum(char *)
1805: [00062950] void CONFIG_ReadKeys(int)
1806: [00062A80] void CONFIG_UpdateKeys()
1807: [00062A90] void CONFIG_WriteKeys(int)
1808: [00062AB0] void CONFIG_SetupMouse(int)
1809: [00062CE0] void CONFIG_SetupGamePad(int)
1810: [00062EB0] void CONFIG_SetupJoystick(int)
1811: [00063130] void CONFIG_ReadSetup()
1812: [00063590] void CONFIG_WriteSetup()
1813: [00063830] void CONFIG_WriteAdultMode()
1824: [00065370] void PutPacketByte(char *, int)
1840: [00063880] void CalcGameChecksum()
1841: [00063AA0] void netCheckSync()
1842: [00063C70] void netGetPackets()
1843: [000643B0] void netBroadcastMyLogoff()
1844: [000644A0] void netBroadcastPlayerInfo(int)
1845: [000645B0] void netBroadcastNewGame()
1846: [000646F0] void netWaitForEveryone()
1847: [000647E0] void netSendEmptyPackets()
1848: [00064880] void netGetInput()
1850: [000651E0] void netInitialize()
1851: [00065240] void netPlayerQuit(int)
1860: [000653B0] void .fn_init()
1861: [000653E0] void CDemo::CDemo()
1862: [00065430] void CDemo::~CDemo()
1863: [00065480] void CDemo::Create(char *)
1864: [00065570] void CDemo::Write(INPUT *)
1865: [000656C0] void CDemo::Close()
1866: [00065740] void CDemo::SetupPlayback(char *)
1867: [000657C0] void CDemo::ProcessKeys()
1868: [000658A0] void CDemo::Playback()
1869: [00065BA0] void CDemo::StopPlayback()
1870: [00065BB0] void CDemo::LoadDemoInfo()
1871: [00065C80] void CDemo::NextDemo()
1900: [00065CB0] void gibCalcWallArea(int, int &, int &, int &, int &, int &, int &, int &)
1901: [00065DE0] void ChanceToCount(int, int)
1902: [00065E20] void GibFX(SPRITE *, GIBFX *, CGibPosition *, CGibVelocity *)
1903: [00066150] void GibThing(SPRITE *, GIBTHING *, CGibPosition *, CGibVelocity *)
1904: [00066500] void GibSprite(SPRITE *, GIBTYPE, CGibPosition *, CGibVelocity *)
1905: [00066630] void GibFX(int, GIBFX *, int, int, int, int, CGibVelocity *)
1906: [00066870] void GibWall(int, GIBTYPE, CGibVelocity *)
1910: [00066A30] void ambProcess()
1911: [00066BB0] void ambKillAll()
1912: [00066C10] void ambInit()
1916: [00069DC0] void IncRotate(int, int)
1917: [00069DB0] void DecRotate(int, int)
1918: [00069DA0] void CGameMenuItem::CanShow()
1919: [00069D90] void CGameMenuItem::CanFocus()
1937: [00066DD0] void .fn_init()
1938: [00066E10] void CMenuTextMgr::CMenuTextMgr()
1939: [00066E20] void CMenuTextMgr::~CMenuTextMgr()
1940: [00066E40] void CMenuTextMgr::DrawText(char *, int, int, int, int, int, unsigned char)
1941: [00066F30] void CMenuTextMgr::GetFontInfo(int, char *, int *, int *)
1942: [00066F60] void CMenuTextMgr::LockFont(int)
1943: [00066FD0] void CMenuTextMgr::UnlockFont()
1944: [00067000] void CMenuTextMgr::GetFontInfo(char *, int *, int *)
1945: [000670B0] void CGameMenuMgr::CGameMenuMgr()
1946: [000670F0] void CGameMenuMgr::~CGameMenuMgr()
1947: [00067110] void CGameMenuMgr::InitializeMenu()
1948: [00067140] void CGameMenuMgr::Push(CGameMenu *, int)
1949: [000671B0] void CGameMenuMgr::Pop()
1950: [000671E0] void CGameMenuMgr::Draw()
1951: [000671F0] void CGameMenuMgr::Clear()
1952: [00067220] void CGameMenuMgr::Process()
1953: [00067390] void CGameMenuMgr::Deactivate()
1954: [000673B0] void CGameMenu::CGameMenu()
1955: [000673D0] void CGameMenu::InitializeItems(CGameMenuEvent &)
1956: [00067400] void CGameMenu::Draw()
1957: [00067440] void CGameMenu::Event(CGameMenuEvent &)
1958: [00067490] void CGameMenu::Add(CGameMenuItem *, unsigned char)
1959: [000674F0] void CGameMenu::SetFocusItem(int)
1960: [00067530] void CGameMenu::CanSelectItem(int)
1961: [00067590] void CGameMenu::FocusPrevItem()
1962: [000675E0] void CGameMenu::FocusNextItem()
1963: [00067630] void CGameMenu::IsFocusItem(CGameMenuItem *)
1964: [00067680] void CGameMenuItem::CGameMenuItem()
1965: [000676C0] void CGameMenuItem::Event(CGameMenuEvent &)
1966: [000676C0] void CGameMenuItemText::Event(CGameMenuEvent &)
1967: [000676C0] void CGameMenuItemTitle::Event(CGameMenuEvent &)
1968: [00067700] void CGameMenuItemText::CGameMenuItemText()
1969: [00067720] void CGameMenuItemText::CGameMenuItemText(char *, int, int, int, int)
1970: [00067760] void CGameMenuItemText::Draw()
1971: [00067800] void CGameMenuItemTitle::CGameMenuItemTitle()
1972: [00067820] void CGameMenuItemTitle::CGameMenuItemTitle(char *, int, int, int, int)
1973: [00067860] void CGameMenuItemTitle::Draw()
1974: [00067900] void CGameMenuItemZBool::CGameMenuItemZBool()
1975: [00067930] void CGameMenuItemZBool::CGameMenuItemZBool(char *, int, int, int, int, unsigned char, /* Function pointer */ *, char *, char *)
1976: [00067990] void CGameMenuItemZBool::Draw()
1977: [00067A40] void CGameMenuItemZBool::Event(CGameMenuEvent &)
1978: [00067A80] void CGameMenuItemChain::CGameMenuItemChain()
1979: [00067AB0] void CGameMenuItemChain::CGameMenuItemChain(char *, int, int, int, int, int, CGameMenu *, int, /* Function pointer */ *, int)
1980: [00067B00] void CGameMenuItemChain::Draw()
1981: [00067BE0] void CGameMenuItemChain::Event(CGameMenuEvent &)
1982: [00067C30] void CGameMenuItemBitmap::CGameMenuItemBitmap()
1983: [00067C50] void CGameMenuItemBitmap::CGameMenuItemBitmap(char *, int, int, int, int)
1984: [00067C80] void CGameMenuItemBitmap::Draw()
1985: [00067D40] void CGameMenuItemBitmap::Event(CGameMenuEvent &)
1986: [00067D80] void CGameMenuItemBitmapLS::CGameMenuItemBitmapLS()
1987: [00067DA0] void CGameMenuItemBitmapLS::CGameMenuItemBitmapLS(char *, int, int, int, int)
1988: [00067DD0] void CGameMenuItemBitmapLS::Draw()
1989: [00067E80] void CGameMenuItemBitmapLS::Event(CGameMenuEvent &)
1990: [00067EC0] void CGameMenuItemKeyList::CGameMenuItemKeyList()
1991: [00067F10] void CGameMenuItemKeyList::CGameMenuItemKeyList(char *, int, int, int, int, int, int, /* Function pointer */ *)
1992: [00067F60] void CGameMenuItemKeyList::Scan()
1993: [00067F80] void CGameMenuItemKeyList::Draw()
1994: [000681A0] void CGameMenuItemKeyList::Event(CGameMenuEvent &)
1995: [00068370] void CGameMenuItemSlider::CGameMenuItemSlider()
1996: [000683E0] void CGameMenuItemSlider::CGameMenuItemSlider(char *, int, int, int, int, int, int, int, int, /* Function pointer */ *, int, int)
1997: [00068470] void CGameMenuItemSlider::CGameMenuItemSlider(char *, int, int, int, int, int *, int, int, int, /* Function pointer */ *, int, int)
1998: [00068520] void CGameMenuItemSlider::Draw()
1999: [000686C0] void CGameMenuItemSlider::Event(CGameMenuEvent &)
2000: [00068840] void CGameMenuItemZEdit::CGameMenuItemZEdit()
2001: [000688A0] void CGameMenuItemZEdit::CGameMenuItemZEdit(char *, int, int, int, int, char *, int, unsigned char, /* Function pointer */ *, int)
2002: [00068900] void CGameMenuItemZEdit::AddChar(char)
2003: [00068930] void CGameMenuItemZEdit::BackChar()
2004: [00068960] void CGameMenuItemZEdit::Draw()
2005: [00068AB0] void CGameMenuItemZEdit::Event(CGameMenuEvent &)
2006: [00068C20] void CGameMenuItemQAV::CGameMenuItemQAV()
2007: [00068C50] void CGameMenuItemQAV::CGameMenuItemQAV(char *, int, int, int, char *)
2008: [00068C90] void CGameMenuItemQAV::Draw()
2009: [00068D10] void CGameMenuItemQAV::Event(CGameMenuEvent &)
2010: [00068E50] void CGameMenuItemZCycle::CGameMenuItemZCycle()
2011: [00068E90] void CGameMenuItemZCycle::CGameMenuItemZCycle(char *, int, int, int, int, int, /* Function pointer */ *, char *, int, int)
2012: [00068EF0] void CGameMenuItemZCycle::~CGameMenuItemZCycle()
2013: [00068F40] void CGameMenuItemZCycle::Draw()
2014: [000690A0] void CGameMenuItemZCycle::Event(CGameMenuEvent &)
2015: [00069110] void CGameMenuItemZCycle::Add(char *, unsigned char)
2016: [00069170] void CGameMenuItemZCycle::Next()
2017: [00069190] void CGameMenuItemZCycle::Prev()
2018: [000691B0] void CGameMenuItemZCycle::Clear()
2019: [000691F0] void CGameMenuItemZCycle::SetTextArray(char *, int, int)
2020: [00069250] void CGameMenuItemZCycle::SetTextIndex(int)
2021: [00069270] void CGameMenuItemYesNoQuit::CGameMenuItemYesNoQuit()
2022: [000692A0] void CGameMenuItemYesNoQuit::CGameMenuItemYesNoQuit(char *, int, int, int, int, int, int, int)
2023: [000692E0] void CGameMenuItemYesNoQuit::Draw()
2024: [000693C0] void CGameMenuItemYesNoQuit::Event(CGameMenuEvent &)
2025: [00069420] void CGameMenuItemPicCycle::CGameMenuItemPicCycle()
2026: [00069460] void CGameMenuItemPicCycle::CGameMenuItemPicCycle(int, int, /* Function pointer */ *, int *, int, int)
2027: [000694C0] void CGameMenuItemPicCycle::Draw()
2028: [00069570] void CGameMenuItemPicCycle::Event(CGameMenuEvent &)
2029: [000695E0] void CGameMenuItemPicCycle::Add(int, unsigned char)
2030: [00069630] void CGameMenuItemPicCycle::Next()
2031: [00069650] void CGameMenuItemPicCycle::Prev()
2032: [00069670] void CGameMenuItemPicCycle::Clear()
2033: [000696A0] void CGameMenuItemPicCycle::SetPicArray(int *, int, int)
2034: [00069700] void CGameMenuItemPicCycle::SetPicIndex(int)
2035: [00069720] void CGameMenuItemPassword::CGameMenuItemPassword()
2036: [00069750] void CGameMenuItemPassword::CGameMenuItemPassword(char *, int, int, int)
2037: [00069790] void CGameMenuItemPassword::Draw()
2038: [00069A70] void CGameMenuItemPassword::Event(CGameMenuEvent &)
2081: [00069DD0] void CCDAudio::cdrom_setup()
2082: [0006A080] void CCDAudio::cdrom_shutdown()
2083: [0006A190] void CCDAudio::device_request(void *)
2084: [0006A300] void CCDAudio::red_book(unsigned int, unsigned char *, unsigned char *, unsigned char *)
2085: [0006A330] void CCDAudio::hsg(unsigned int)
2086: [0006A3B0] void CCDAudio::cd_head_position()
2087: [0006A450] void CCDAudio::cd_get_volume(volumeinfo *)
2088: [0006A530] void CCDAudio::cd_getupc()
2089: [0006A620] void CCDAudio::cd_get_audio_info()
2090: [0006A710] void CCDAudio::cd_set_track(short)
2091: [0006A7E0] void CCDAudio::get_track_length(short)
2092: [0006A840] void CCDAudio::cd_track_length(short, unsigned char *, unsigned char *, unsigned char *)
2093: [0006A8A0] void CCDAudio::cd_status()
2094: [0006A940] void CCDAudio::cd_seek(unsigned int)
2095: [0006A9B0] void CCDAudio::cd_play_audio(unsigned int, unsigned int)
2096: [0006AA10] void CCDAudio::cd_stop_audio()
2097: [0006AA50] void CCDAudio::cd_resume_audio()
2098: [0006AA90] void CCDAudio::cd_cmd(unsigned char)
2099: [0006AB00] void CCDAudio::cd_getpos(playinfo *)
2100: [0006ABE0] void CCDAudio::cdrom_installed()
2101: [0006AC50] void CCDAudio::cd_done_play()
2102: [0006AC70] void CCDAudio::cd_mediach()
2103: [0006AD10] void CCDAudio::cd_lock(unsigned char)
2104: [0006AD90] void CCDAudio::play_song(short)
2105: [0006AEA0] void CCDAudio::pause_song()
2106: [0006AED0] void CCDAudio::newdisk()
2107: [0006AF90] void CCDAudio::SetVolume(int)
2108: [0006AFB0] void CCDAudio::cd_set_volume(volumeinfo *)
2109: [0006B070] void CCDAudio::GetVolume()
2110: [0006B090] void CCDAudio::StopSong()
2111: [0006B0B0] void CCDAudio::preprocess()
2112: [0006B140] void CCDAudio::postprocess()
2120: [0006B250] void CSMKPlayer::CSMKPlayer()
2121: [0006B290] void CSMKPlayer::~CSMKPlayer()
2122: [0006B2C0] void CSMKPlayer::PlaySMK(char *)
2123: [0006B2D0] void CSMKPlayer::PlaySMKWithWAV(char *, int)
2168: [0006DC50] void Resource::RemoveMRU(CACHENODE *)
2169: [0006CF70] void Resource::Resource()
2170: [0006CFA0] void Resource::~Resource()
2171: [0006CFE0] void Resource::Init(char *, char *)
2172: [0006D320] void Resource::Flush(CACHENODE *)
2173: [0006D370] void Resource::Purge()
2174: [0006D3A0] void Resource::Probe(const char *, const char *)
2175: [0006D4C0] void Resource::Probe(unsigned int, const char *)
2176: [0006D5B0] void Resource::Reindex()
2177: [0006D690] void Resource::Grow()
2178: [0006D720] void Resource::AddExternalResource(char *, char *, int)
2179: [0006D7F0] void Resource::Alloc(int)
2180: [0006D900] void Resource::Free(void *)
2181: [0006D950] void Resource::Lookup(char *, char *)
2182: [0006D9B0] void Resource::Lookup(unsigned int, char *)
2183: [0006D9F0] void Resource::Read(DICTNODE *)	--> 00087820
2184: [0006DAF0] void Resource::Load(DICTNODE *)
2185: [0006DB80] void Resource::Lock(DICTNODE *)
2186: [0006DBE0] void Resource::Unlock(DICTNODE *)
2191: [0006DCD4] void fs_state_table(ro_dtreg *)
2192: [0006DCD8] void fs_point_object(rw_dtreg *, unsigned int)
2193: [0006DCDF] void fs_init_traverse(__1j2o3bSTAB_TRAVERSE *, rw_dtreg *)
2194: [0006DCE4] void init()
2671: [0008AA40] void newKeyHandler()
2672: [0008AB70] void NEWKEYEND()
2673: [0008AB80] void keyRemove()
2674: [0008ABC0] void keyInstall()
2675: [0008AC40] void keyGet()
2676: [0008AC70] void keyCompareStream(unsigned char *, int)
2677: [0008ACA0] void keyCompareStream(unsigned char *, int, int)
2678: [0008ACD0] void keyReadStream(char *, int)
2679: [0008AD00] void keyPokeStream(unsigned char)
2680: [0008AD30] void keyFlushStream()
2681: [0008AD40] void keyName(unsigned char)
2686: [0008ADE0] void GetOctant(int, int)
2687: [0008AE30] void RotateVector(int *, int *, int)
2688: [0008AED0] void RotatePoint(int *, int *, int, int, int)
2689: [0008AF90] void trigInit(const Resource &)
2698: [0008B100] void GetOptions(SWITCH *)
2703: [0008B2E0] void errSetHandler(/* Function pointer */ *)
2704: [0008B2F0] void DefaultHandler(const Error &)
2705: [0008B340] void _SetErrorLoc(const char *, int)
2706: [0008B350] void _ThrowError(const char *, ...)
2718: [0008B6DC] void ()
2719: [0008B730] void FileRead(int, void *, unsigned int)
2720: [0008B740] void FileWrite(int, void *, unsigned int)
2721: [0008B750] void FileLoad(char *, void *, unsigned int)
2722: [0008B7B0] void FileSave(char *, void *, unsigned int)
2723: [0008B810] void dpmiDetermineMaxRealAlloc()
2724: [0008B900] void AddExtension(char *, char *)
2725: [0008B980] void ChangeExtension(char *, char *)
2726: [0008B9F0] void qrand()
2727: [0008BA10] void biosReadSector(unsigned int, unsigned int, unsigned int, unsigned int, char *)
2730: [0008BBC0] void InstallFenceposts(HEAPNODE *)
2731: [0008BC00] void CheckFenceposts(HEAPNODE *)
2732: [0008BC80] void QHeap::QHeap(int)
2733: [0008BD80] void QHeap::~QHeap()
2734: [0008BDC0] void QHeap::Check()
2735: [0008BDF0] void QHeap::Alloc(int)
2736: [0008BEE0] void QHeap::Free(void *)
2742: [0008BFB0] void WriteString(int, int, char *, char)
2743: [0008BFE0] void tioInit(int)
2744: [0008C090] void tioCursorOff()
2745: [0008C0A0] void tioCursorOn()
2746: [0008C0A0] void tioTerm()
2747: [0008C0C0] void tioFill(int, int, int, int, char, char)
2748: [0008C140] void tioFillChar(int, int, int, int, char)
2749: [0008C1C0] void tioFillAttr(int, int, int, int, char)
2750: [0008C240] void tioFillShadow(int, int, int, int)
2751: [0008C2C0] void tioFrame(int, int, int, int, char, char)
2752: [0008C430] void tioLeftString(int, int, char *, char)
2753: [0008C450] void tioCenterString(int, int, char *, char)
2754: [0008C490] void tioRightString(int, int, char *, char)
2755: [0008C4D0] void tioLeftString(int, int, int, char *, char)
2756: [0008C570] void tioCenterString(int, int, int, char *, char)
2757: [0008C620] void tioRightString(int, int, int, char *, char)
2758: [0008C6D0] void tioWindow(int, int, int, int)
2759: [0008C6F0] void tioSetPos(int, int)
2760: [0008C720] void tioClearWindow()
2761: [0008C770] void tioSetAttribute(char)
2762: [0008C780] void tioPrint(char *, ...)
2763: [0008C860] void tioGauge(int, int)
2764: [0008C950] void tioSaveWindow(char *, int, int, int, int)
2765: [0008C9F0] void tioRestoreWindow(char *, int, int, int, int)
2770: [0008CA90] void InstallDriver(VGT *)
2841: [0008CEE0] void .fn_init()
2842: [0008CF10] void gfxDrawBitmap(QBITMAP *, int, int)
2843: [0008D060] void gfxPixel(int, int)
2844: [0008D0A0] void gfxHLine(int, int, int)
2845: [0008D0E0] void gfxVLine(int, int, int)
2846: [0008D120] void gfxHLineROP(int, int, int)
2847: [0008D160] void gfxVLineROP(int, int, int)
2848: [0008D1A0] void gfxFillBox(int, int, int, int)
2849: [0008D240] void gfxSetClip(int, int, int, int)
2850: [0008D280] void gfxDrawLine(int, int, int, int, int)
2851: [0008D4F0] void gfxDrawPixel(int, int, int)
2852: [0008D530] void printChar(int, int, char)
2853: [0008D5B0] void gfxGetTextLen(char *, QFONT *)
2854: [0008D610] void gfxGetTextNLen(char *, QFONT *, int)
2855: [0008D660] void gfxGetLabelLen(char *, QFONT *)
2856: [0008D6B0] void gfxFindTextPos(char *, QFONT *, int)
2857: [0008D700] void gfxDrawText(int, int, int, char *, QFONT *)
2858: [0008D980] void gfxDrawLabel(int, int, int, char *, QFONT *)
2864: [0008E660] void VideoAddress(int, int)
2865: [0008DC60] void monoFill(int, int, int, int, char, char)
2866: [0008DCE0] void monoFillChar(int, int, int, int, char)
2867: [0008DD60] void monoFillAttr(int, int, int, int, char)
2868: [0008DDE0] void monoFrame(int, int, int, int, char, char)
2869: [0008DF50] void monoSetPos(int, int)
2870: [0008DF60] void monoScrollUp(int)
2871: [0008DFD0] void monoScrollDown(int)
2872: [0008E050] void monoNewLine()
2873: [0008E140] void monoPrintf(const char *, ...)
2874: [0008E190] void monoLeftString(int, int, const char *, char)
2875: [0008E1A0] void monoPrint(const char *, char)
2876: [0008E1C0] void monoCenterString(int, int, const char *, char)
2877: [0008E200] void monoRightString(int, int, const char *, char)
2878: [0008E240] void monoLeftString(int, int, int, const char *, char)
2879: [0008E2D0] void monoCenterString(int, int, int, const char *, char)
2880: [0008E370] void monoRightString(int, int, int, const char *, char)
2881: [0008E410] void monoWindow(int, int, int, int)
2882: [0008E430] void monoClearWindow()
2883: [0008E460] void monoSetAttribute(char)
2884: [0008E470] void monoSaveWindow(char *, int, int, int, int)
2885: [0008E510] void monoRestoreWindow(char *, int, int, int, int)
2886: [0008E5B0] void dprintf(const char *, ...)
2887: [0008E5C0] void __dassert(const char *, const char *, int)
2897: [0008E700] void IOBuffer::Read(void *, int)
2898: [0008E760] void IOBuffer::Write(void *, int)
2899: [0008E7C0] void IOBuffer::Skip(int)
2942: [0008F330] void IniFile::IniFile(char *)
2943: [0008F370] void IniFile::Load()
2944: [0008F570] void IniFile::Save()
2945: [0008F610] void IniFile::FindSection(char *)
2946: [0008F610] void IniFile::SectionExists(char *)
2947: [0008F670] void IniFile::FindKey(char *)
2948: [0008F760] void IniFile::AddSection(char *)
2949: [0008F830] void IniFile::AddKeyString(char *, char *)
2950: [0008F8C0] void IniFile::ChangeKeyString(char *, char *)
2951: [0008F940] void IniFile::KeyExists(char *, char *)
2952: [0008F970] void IniFile::PutKeyString(char *, char *, char *)
2953: [0008F9C0] void IniFile::GetKeyString(char *, char *, char *)
2954: [0008F9F0] void IniFile::PutKeyInt(char *, char *, int)
2955: [0008FA30] void IniFile::GetKeyInt(char *, char *, int)
2956: [0008FA30] void IniFile::GetKeyBool(char *, char *, int)
2957: [0008FA30] void IniFile::GetKeyHex(char *, char *, int)
2958: [0008FA60] void IniFile::PutKeyHex(char *, char *, int)
2959: [0008FAC0] void IniFile::RemoveKey(char *, char *)
2960: [0008FB00] void IniFile::RemoveSection(char *)
2961: [0008FB50] void IniFile::~IniFile()
3181: [000931B0] void PriorityQueue::PriorityQueue()
3182: [000931C0] void PriorityQueue::Upheap()
3183: [00093220] void PriorityQueue::Downheap(unsigned int)
3184: [000932A0] void PriorityQueue::Delete(unsigned int)
3185: [00093300] void PriorityQueue::Insert(unsigned int, unsigned int)
3186: [00093350] void PriorityQueue::Remove()
3191: [000933D8] void ()
3192: [000933E0] void ()
3199: [00093530] void .fn_init()
3200: [00093550] void Mouse::SetRange(int, int)
3201: [000935F0] void Mouse::Read(int)
3459: [00099704] void nextDtorPosn(__1j2o3bSTAB_TRAVERSE *)
3460: [0009974E] void dtorComponent(__iaap9DTOR_CMD *, unsigned int, rw_dtreg *, unsigned int)
3461: [00099798] void destruct_traverse(unsigned int, rw_dtreg *, int)
4277: [000AC994] void arr_state_table(ro_dtreg *)
4278: [000AC998] void arr_point_object(rw_dtreg *, unsigned int)
4279: [000AC9B1] void arr_init_traverse(__1j2o3bSTAB_TRAVERSE *, rw_dtreg *)
4280: [000AC9B6] void init()
4398: [000AE77C] void callTerminate(thread_ctl *)
4400: [000AE7A4] void typesigIndex(dispatch_exc *, unsigned int, rt_type_sig *)
4401: [000AE840] void dispatchableFnExc(dispatch_exc *, __iaap9DTOR_CMD *)
4402: [000AE867] void fneDispatch(dispatch_exc *)
4403: [000AE87D] void dispatchableCatch(dispatch_exc *, __iaap9DTOR_CMD *)
4404: [000AE8A3] void throwCnvSig(dispatch_exc *)
4405: [000AE8B1] void excToBePopped(thread_ctl *)
4406: [000AE954] void catchDispatch(dispatch_exc *)
4407: [000AEA92] void catchDone(thread_ctl *, active_exc *)
4409: [000AEAF0] void unwindExc(dispatch_exc *)
4410: [000AEB15] void unwindStack(dispatch_exc *)
4411: [000AEB6B] void dispatchable(dispatch_exc *, rw_dtreg *)
4412: [000AEC6C] void getActiveExc(thread_ctl *)
4413: [000AECF0] void dispatch_init(dispatch_exc *, throw_ro *, int)
4417: [000AEEB1] void processThrow(void *, throw_ro *, int)
4421: [000AEF1A] void longjmpExcPop(dispatch_exc *, rw_dtreg *)
4422: [000AEF65] void longjmpDtoring(void *)
4423: [000AF005] void longjmpInit()
4814: [000C199C] void catBaseSig(rt_type_sig *)
4988: [000C48E8] void terminate()
4989: [000C4934] void unexpected()
